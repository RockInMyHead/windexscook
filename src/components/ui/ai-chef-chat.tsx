import React, { useState, useRef, useEffect } from 'react';
import { Button } from './button';
import { Input } from './input';
import { Card, CardContent, CardHeader, CardTitle } from './card';
import { Avatar, AvatarFallback, AvatarImage } from './avatar';
import { Badge } from './badge';
import { ScrollArea } from './scroll-area';
import {
  Send,
  Bot,
  User,
  Sparkles,
  Loader2,
  Copy,
  ThumbsUp,
  ThumbsDown,
  Mic,
  Square,
  Volume2,
  Trash2,
  Zap
} from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { OpenAIService } from '@/services/openai';
import { OpenAITTS } from '@/services/openai-tts';
import { useUser } from '@/contexts/UserContext';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
  isTyping?: boolean;
  isAudio?: boolean;
}

interface AiChefChatProps {
  className?: string;
}

export const AiChefChat: React.FC<AiChefChatProps> = ({ className = '' }) => {
  const { user } = useUser();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ localStorage
  const loadMessagesFromStorage = (): Message[] => {
    try {
      const saved = localStorage.getItem('ai-chef-chat-history');
      if (saved) {
        const parsed = JSON.parse(saved);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –æ–±—Ä–∞—Ç–Ω–æ –≤ Date –æ–±—ä–µ–∫—Ç—ã
        return parsed.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç
    return [
      {
        id: '1',
        content: '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?',
        role: 'assistant',
        timestamp: new Date()
      }
    ];
  };

  const [messages, setMessages] = useState<Message[]>(loadMessagesFromStorage);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [audioSupported, setAudioSupported] = useState(false);
  const [isThinking, setIsThinking] = useState(false);
  const [thinkingStep, setThinkingStep] = useState(0);
  const [isFastMode, setIsFastMode] = useState(false); // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  const [isContinuousMode, setIsContinuousMode] = useState(false); // –†–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const [isUserSpeaking, setIsUserSpeaking] = useState(false); // –§–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  const saveMessagesToStorage = (messagesToSave: Message[]) => {
    try {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
      const limitedMessages = messagesToSave.slice(-50);
      localStorage.setItem('ai-chef-chat-history', JSON.stringify(limitedMessages));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  const clearChatHistory = () => {
    const initialMessage = {
      id: Date.now().toString(),
      content: '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –Ω–æ–≤—ã–º–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!',
      role: 'assistant' as const,
      timestamp: new Date()
    };
    setMessages([initialMessage]);
    localStorage.removeItem('ai-chef-chat-history');
    toast({
      title: "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞",
      description: "–ù–∞—á–Ω–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ!",
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const toggleContinuousMode = async () => {
    if (!audioSupported) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
        description: "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ",
        variant: "destructive",
      });
      return;
    }

    const newContinuousMode = !isContinuousMode;
    setIsContinuousMode(newContinuousMode);

    if (newContinuousMode) {
      // –í–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
      toast({
        title: "üé§ –†–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
        description: "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª—É—à–∞—Ç—å –≤–∞—Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
      });

      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
      await startContinuousListening();
    } else {
      // –í—ã–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
      toast({
        title: "–†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω",
        description: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
      });

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      setIsRecording(false);
      setIsUserSpeaking(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const startContinuousListening = async () => {
    if (isRecording || !audioSupported) return;

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω
      stream.getTracks().forEach(track => track.stop());

      await speechToText();
    } catch (error) {
      console.error('Error starting continuous listening:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É",
        variant: "destructive",
      });
      setIsContinuousMode(false);
    }
  };
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // –ú–∞—Å—Å–∏–≤ "–º—ã—Å–ª–µ–π" AI –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const thinkingSteps = [
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
    "–ü–æ–¥–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã...",
    "–°–æ—Å—Ç–∞–≤–ª—è—é –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω...",
    "–£—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...",
    "–§–æ—Ä–º–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...",
    "–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å..."
  ];

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight;
      }
    }
  }, [messages]);

  // –ê–Ω–∏–º–∞—Ü–∏—è –º—ã—Å–ª–µ–π AI
  useEffect(() => {
    if (isThinking) {
      const interval = setInterval(() => {
        setThinkingStep(prev => {
          const nextStep = (prev + 1) % thinkingSteps.length;
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—ã—à–ª–µ–Ω–∏–∏
          setMessages(currentMessages => 
            currentMessages.map(msg => 
              msg.id === 'thinking' 
                ? { ...msg, content: thinkingSteps[nextStep] }
                : msg
            )
          );
          return nextStep;
        });
      }, 1500); // –ú–µ–Ω—è–µ–º –º—ã—Å–ª—å –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã

      return () => clearInterval(interval);
    }
  }, [isThinking, thinkingSteps]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAudioSupport = () => {
      const hasWebkitSpeechRecognition = !!(window as any).webkitSpeechRecognition;
      const hasSpeechRecognition = !!(window as any).SpeechRecognition;
      const hasSpeechRecognitionSupport = hasWebkitSpeechRecognition || hasSpeechRecognition;
      
      console.log('Speech Recognition Support Check:');
      console.log('- webkitSpeechRecognition:', hasWebkitSpeechRecognition);
      console.log('- SpeechRecognition:', hasSpeechRecognition);
      console.log('- Final support:', hasSpeechRecognitionSupport);
      
      setAudioSupported(hasSpeechRecognitionSupport);
    };
    
    checkAudioSupport();
  }, []);


  const sendMessageToAI = async (messageText: string) => {
    setIsLoading(true);
    setIsThinking(true);
    setThinkingStep(0);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
    const thinkingMessage: Message = {
      id: 'thinking',
      content: thinkingSteps[0],
      role: 'assistant',
      timestamp: new Date(),
      isTyping: true
    };

    setMessages(prev => [...prev, thinkingMessage]);

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const messageHistory = messages
        .filter(msg => 
          msg.id !== 'thinking' && 
          !(msg.role === 'assistant' && msg.content === '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?')
        )
        .map(msg => ({
          role: msg.role,
          content: msg.content
        }));

      console.log('üîç DEBUG: Sending message history:', messageHistory.length, 'messages');

      try {
        const response = await OpenAIService.chatWithChef(messageText, user?.healthProfile, messageHistory, isFastMode);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ã—à–ª–µ–Ω–∏–∏
        setMessages(prev => {
          const withoutThinking = prev.filter(msg => msg.id !== 'thinking');

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
          if (response && response.trim()) {
            const newMessages = [...withoutThinking, {
              id: Date.now().toString(),
              content: response,
              role: 'assistant',
              timestamp: new Date()
            }];

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
            saveMessagesToStorage(newMessages);

            return newMessages;
          }

          return withoutThinking;
        });
      } catch (error) {
        console.error('Error sending message:', error);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ã—à–ª–µ–Ω–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        setMessages(prev => {
          const withoutThinking = prev.filter(msg => msg.id !== 'thinking');
          const errorMessage = {
            id: Date.now().toString(),
            content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
            role: 'assistant' as const,
            timestamp: new Date()
          };
          const newMessages = [...withoutThinking, errorMessage];

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
          saveMessagesToStorage(newMessages);

          return newMessages;
        });
      } finally {
        setIsLoading(false);
        setIsThinking(false);
      }
    } catch (error) {
      console.error('Unexpected error in sendMessageToAI:', error);
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ã—à–ª–µ–Ω–∏–∏ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
      setMessages(prev => prev.filter(msg => msg.id !== 'thinking'));
      setIsLoading(false);
      setIsThinking(false);
    }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage.trim(),
      role: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const messageText = inputMessage.trim();
    setInputMessage('');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ AI
    await sendMessageToAI(messageText);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleCopyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
      description: "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const handleSpeakMessage = async (content: string) => {
    try {
      await OpenAITTS.speak(content);
      toast({
        title: "üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
        description: "–û—Ç–≤–µ—Ç AI –æ–∑–≤—É—á–µ–Ω",
      });

      // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
      if (isContinuousMode) {
        console.log('üé§ TTS finished, starting continuous listening...');
        setTimeout(() => {
          startContinuousListening();
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
      }
    } catch (error) {
      console.error('Error speaking message:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç",
        variant: "destructive",
      });

      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ TTS, –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
      if (isContinuousMode) {
        setTimeout(() => {
          startContinuousListening();
        }, 1000);
      }
    }
  };

  const handleClearChat = () => {
    clearChatHistory();
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatMessageContent = (content: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º ### –Ω–∞ ** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–µ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    let formattedContent = content.replace(/\n### (.*?)(?=\n|$)/g, '\n**$1**');
    
    // –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º #### –Ω–∞ ** –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    formattedContent = formattedContent.replace(/\n#### (.*?)(?=\n|$)/g, '\n**$1**');
    
    // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const parts = formattedContent.split(/(\*\*.*?\*\*)/g);
    
    const formattedParts = parts.map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        // –≠—Ç–æ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ ### (–±–æ–ª—å—à–∏–π —à—Ä–∏—Ñ—Ç)
        const text = part.slice(2, -2);
        const originalText = content;
        const isLargeFont = originalText.includes(`### ${text}`);
        
        if (isLargeFont) {
          return <strong key={index} className="font-bold text-lg">{text}</strong>;
        } else {
          return <strong key={index} className="font-bold">{text}</strong>;
        }
      }
      return part;
    });

    // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Windexs
    const finalParts: React.ReactNode[] = [];
    
    formattedParts.forEach((part, index) => {
      if (typeof part === 'string') {
        const windexsParts = part.split('Windexs');
        windexsParts.forEach((subPart, subIndex) => {
          if (subIndex > 0) {
            finalParts.push(<span key={`${index}-${subIndex}`} className="text-primary font-semibold">Windexs</span>);
          }
          if (subPart) {
            finalParts.push(subPart);
          }
        });
      } else {
        finalParts.push(part);
      }
    });

    return finalParts;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
  const startRecording = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Speech API
      if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏');
      }

      setIsRecording(true);
      
      toast({
        title: "üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å",
        description: "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω...",
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞–ø—Ä—è–º—É—é
      const text = await speechToText();
      
      if (text) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        const audioMessage: Message = {
          id: Date.now().toString(),
          content: text,
          role: 'user',
          timestamp: new Date(),
          isAudio: true
        };
        
        setMessages(prev => {
          const newMessages = [...prev, audioMessage];
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
          saveMessagesToStorage(newMessages);
          return newMessages;
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        setTimeout(async () => {
          await sendMessageToAI(text);
        }, 1000);
      }
      
      setIsRecording(false);
      
    } catch (error) {
      console.error('Error starting recording:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É';
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏",
        description: errorMessage,
        variant: "destructive",
      });
      setIsRecording(false);
    }
  };

  const stopRecording = () => {
    // –î–ª—è –ø—Ä—è–º–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
    setIsRecording(false);
  };


  const speechToText = (): Promise<string> => {
    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Speech API
      if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        reject(new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏'));
        return;
      }

      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = 'ru-RU';
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      let hasResult = false;

      recognition.onstart = () => {
        console.log('Speech recognition started');
        toast({
          title: "üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏",
          description: "–°–ª—É—à–∞–µ–º... –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ.",
        });
      };

      recognition.onresult = (event: any) => {
        hasResult = true;
        const result = event.results[0][0].transcript;
        console.log('Speech recognition result:', result);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
        toast({
          title: "‚úÖ –†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
          description: `"${result}"`,
        });

        // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ AI
        if (isContinuousMode && result.trim()) {
          console.log('üéØ Continuous mode: auto-sending message to AI');
          setTimeout(() => {
            sendMessageToAI(result.trim());
          }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        }

        resolve(result);
      };

      recognition.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        hasResult = true;
        
        let errorMessage = '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏';
        switch (event.error) {
          case 'no-speech':
            errorMessage = '–†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –≥—Ä–æ–º—á–µ.';
            break;
          case 'audio-capture':
            errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.';
            break;
          case 'not-allowed':
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
            break;
          case 'network':
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            break;
        }
        
        reject(new Error(errorMessage));
      };

      recognition.onend = () => {
        if (!hasResult) {
          reject(new Error('–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'));
        }
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
      try {
        recognition.start();
      } catch (error) {
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏'));
      }
    });
  };


  return (
    <div className={`h-full flex flex-col overflow-hidden ${className}`}>
      <Card className="flex-1 flex flex-col overflow-hidden mb-32 border-0 shadow-none mt-[5%]">
        {/* Recording indicator - only show when recording */}
        {isRecording && (
          <div className="p-4 flex-shrink-0">
            <div className="flex items-center gap-2 text-red-500">
              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
              <span className="text-sm">–ó–∞–ø–∏—Å—å...</span>
            </div>
          </div>
        )}

        <CardContent className="flex-1 flex flex-col p-0 min-h-0">
        <ScrollArea ref={scrollAreaRef} className="flex-1 px-4 sm:px-6 lg:px-[10%] min-h-0">
          <div className="space-y-4 pb-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.role === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {message.role === 'assistant' && (
                  <Avatar className="w-8 h-8 shrink-0">
                    <AvatarFallback className="bg-gradient-primary text-primary-foreground">
                      <Bot className="w-4 h-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
                
                <div
                  className={`max-w-[80%] space-y-2 ${
                    message.role === 'user' ? 'order-first' : ''
                  }`}
                >
                  <div
                    className={`px-4 py-3 rounded-2xl ${
                      message.role === 'user'
                        ? 'bg-primary text-primary-foreground ml-auto'
                        : 'bg-muted'
                    } ${
                      message.isTyping ? 'animate-pulse' : ''
                    }`}
                  >
                    {message.isAudio ? (
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center">
                          <Mic className="w-4 h-4 text-blue-500" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm font-medium mb-1">üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                          <p className="text-sm whitespace-pre-wrap opacity-90">{message.content}</p>
                        </div>
                      </div>
                    ) : message.isTyping ? (
                      <div className="flex items-center gap-2">
                        <p className="text-sm whitespace-pre-wrap">{formatMessageContent(message.content)}</p>
                        <div className="flex gap-1">
                          <div className="w-1 h-1 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                          <div className="w-1 h-1 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                          <div className="w-1 h-1 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                        </div>
                      </div>
                    ) : (
                      <p className="text-sm whitespace-pre-wrap">{formatMessageContent(message.content)}</p>
                    )}
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-muted-foreground">
                      {formatTime(message.timestamp)}
                    </span>
                    {message.role === 'assistant' && !message.isTyping && (
                      <div className="flex gap-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                          onClick={() => handleCopyMessage(message.content)}
                        >
                          <Copy className="w-3 h-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                          onClick={() => handleSpeakMessage(message.content)}
                        >
                          <Volume2 className="w-3 h-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                        >
                          <ThumbsUp className="w-3 h-3" />
                        </Button>
                      </div>
                    )}
                    {message.isAudio && (
                      <div className="flex items-center gap-1">
                        <span className="text-xs text-blue-500">üé§</span>
                        <span className="text-xs text-muted-foreground">–ê—É–¥–∏–æ</span>
                      </div>
                    )}
                  </div>
                </div>

                {message.role === 'user' && (
                  <Avatar className="w-8 h-8 shrink-0">
                    <AvatarFallback className="bg-accent text-accent-foreground">
                      <User className="w-4 h-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
          </div>
        </ScrollArea>
        </CardContent>
      </Card>

      {/* Fixed input at bottom of page */}
      <div className="fixed bottom-0 left-0 right-0 p-3 sm:p-4 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 z-50">
        <div className="container mx-auto max-w-4xl">
          <div className="flex gap-2">
            <Input
              ref={inputRef}
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ –≥–æ—Ç–æ–≤–∫–µ..."
              disabled={isLoading || isRecording}
              className="flex-1 text-sm sm:text-base"
            />
            <Button
              onClick={isRecording ? stopRecording : startRecording}
              disabled={isLoading || !audioSupported}
              size="icon"
              className={`shrink-0 h-10 w-10 ${
                isRecording 
                  ? 'bg-red-500 hover:bg-red-600 text-white' 
                  : audioSupported 
                    ? 'bg-blue-500 hover:bg-blue-600 text-white'
                    : 'bg-gray-400 text-gray-600 cursor-not-allowed'
              }`}
              title={audioSupported ? (isRecording ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å') : '–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}
            >
              {isRecording ? (
                <Square className="w-4 h-4" />
              ) : (
                <Mic className="w-4 h-4" />
              )}
            </Button>
            <Button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading || isRecording}
              size="icon"
              className="shrink-0 h-10 w-10"
            >
              {isLoading ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
            <Button
              onClick={() => setIsFastMode(!isFastMode)}
              disabled={isLoading || isRecording}
              size="icon"
              variant={isFastMode ? "default" : "outline"}
              className="shrink-0 h-10 w-10"
              title={isFastMode ? "–í—ã–∫–ª—é—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º" : "–í–∫–ª—é—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º"}
            >
              <Zap className={`w-4 h-4 ${isFastMode ? 'text-yellow-400' : ''}`} />
            </Button>
            <Button
              onClick={toggleContinuousMode}
              disabled={isLoading || !audioSupported}
              size="icon"
              variant={isContinuousMode ? "default" : "outline"}
              className="shrink-0 h-10 w-10"
              title={isContinuousMode ? "–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥" : "–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"}
            >
              <Mic className={`w-4 h-4 ${isContinuousMode ? 'text-red-400 animate-pulse' : ''}`} />
            </Button>
            <Button
              onClick={handleClearChat}
              disabled={isLoading || isRecording}
              size="icon"
              variant="outline"
              className="shrink-0 h-10 w-10"
              title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
          </div>
          <p className="text-xs text-muted-foreground mt-2 hidden sm:block">
            üí° –°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö, —Ç–µ—Ö–Ω–∏–∫–∞—Ö –≥–æ—Ç–æ–≤–∫–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö –∏–ª–∏ –ª—é–±—ã—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.
            {isFastMode && <span className="text-yellow-600 font-medium"> ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω</span>}
            {isContinuousMode && <span className="text-red-600 font-medium"> üé§ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–µ–Ω</span>}
            {audioSupported ? (
              <span className="text-blue-500"> üé§ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (Chrome, Edge, Safari)</span>
            ) : (
              <span className="text-gray-500"> üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome, Edge –∏–ª–∏ Safari.</span>
            )}
          </p>
        </div>
      </div>
    </div>
  );
};
// File integrity check
