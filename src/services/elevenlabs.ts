// ElevenLabs API Service
export class ElevenLabsService {
  private static readonly BASE_URL = 'https://api.elevenlabs.io/v1';
  private static readonly WEBSOCKET_URL = 'wss://api.elevenlabs.io/v1/convai/conversation';
  private static readonly MIRROR_URL = 'https://app.elevenlabs.io/mirror';
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
  private static readonly AGENT_CONFIG = {
    agentId: 'agent_8701k5ywr031f5e86wjzba6m45ed',
    apiKey: 'sk_6fd6eec1a1f22584d4196153f693da3d58c8ca6d6de0248d'
  };

  /**
   * –°–æ–∑–¥–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs
   */
  static async createWebSocketConnection(): Promise<WebSocket> {
    return new Promise((resolve, reject) => {
      console.log('üîå –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs...');
      console.log('URL:', this.WEBSOCKET_URL);
      
      const ws = new WebSocket(this.WEBSOCKET_URL);
      let configSent = false;
      
      ws.onopen = () => {
        console.log('‚úÖ Connected to ElevenLabs WebSocket');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        const configMessage = {
          type: 'start_conversation',
          payload: {
            agent_id: this.AGENT_CONFIG.agentId,
            api_key: this.AGENT_CONFIG.apiKey
          }
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞:', configMessage);
        ws.send(JSON.stringify(configMessage));
        
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        setTimeout(() => {
          if (ws.readyState === WebSocket.OPEN) {
            const altConfigMessage = {
              type: 'init',
              agent_id: this.AGENT_CONFIG.agentId,
              api_key: this.AGENT_CONFIG.apiKey
            };
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:', altConfigMessage);
            ws.send(JSON.stringify(altConfigMessage));
          }
        }, 500);
        configSent = true;
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        setTimeout(() => {
          if (ws.readyState === WebSocket.OPEN) {
            resolve(ws);
          }
        }, 1000);
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ElevenLabs:', data);
          
          if (data.type === 'error') {
            console.error('‚ùå ElevenLabs error:', data.message);
            reject(new Error(data.message || '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞'));
          } else if (data.type === 'agent_ready' || data.type === 'conversation_started' || data.type === 'ready') {
            console.log('‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            resolve(ws);
          } else if (data.type === 'success') {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞');
            resolve(ws);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå ElevenLabs WebSocket error:', error);
        reject(new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs'));
      };

      ws.onclose = (event) => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        if (!configSent) {
          reject(new Error(`WebSocket –∑–∞–∫—Ä—ã—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${event.code} ${event.reason}`));
        }
      };
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
   */
  static async getAgentInfo(): Promise<any> {
    try {
      const response = await fetch(`${this.BASE_URL}/convai/agent/${this.AGENT_CONFIG.agentId}`, {
        headers: {
          'Authorization': `Bearer ${this.AGENT_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching agent info:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
   */
  static async sendAudioMessage(audioBlob: Blob): Promise<void> {
    try {
      const formData = new FormData();
      formData.append('audio', audioBlob);
      formData.append('agent_id', this.AGENT_CONFIG.agentId);

      const response = await fetch(`${this.BASE_URL}/convai/conversation`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.AGENT_CONFIG.apiKey}`
        },
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Error sending audio message:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
   */
  static async getMediaStream(): Promise<MediaStream> {
    try {
      console.log('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...');
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', await navigator.mediaDevices.enumerateDevices());
      
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { 
          width: { ideal: 640 },
          height: { ideal: 480 },
          facingMode: 'user'
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      });

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫:', stream);
      console.log('–í–∏–¥–µ–æ —Ç—Ä–µ–∫–∏:', stream.getVideoTracks());
      console.log('–ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏:', stream.getAudioTracks());
      
      return stream;
    } catch (error) {
      console.error('‚ùå Error accessing media devices:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç MediaRecorder –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
   */
  static createAudioRecorder(stream: MediaStream): MediaRecorder {
    const audioTracks = stream.getAudioTracks();
    if (audioTracks.length === 0) {
      throw new Error('–ê—É–¥–∏–æ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const audioStream = new MediaStream(audioTracks);
    const recorder = new MediaRecorder(audioStream, {
      mimeType: 'audio/webm;codecs=opus'
    });

    return recorder;
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç
   */
  static async playAudioResponse(audioData: string): Promise<void> {
    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
      const audioBuffer = Uint8Array.from(atob(audioData), c => c.charCodeAt(0));
      const blob = new Blob([audioBuffer], { type: 'audio/mpeg' });
      const audioUrl = URL.createObjectURL(blob);

      const audio = new Audio(audioUrl);
      audio.volume = 0.8;
      
      await audio.play();
      
      // –û—á–∏—â–∞–µ–º URL –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      audio.onended = () => {
        URL.revokeObjectURL(audioUrl);
      };
    } catch (error) {
      console.error('Error playing audio response:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É WebRTC –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  static checkWebRTCSupport(): boolean {
    return !!(
      navigator.mediaDevices &&
      navigator.mediaDevices.getUserMedia &&
      window.WebSocket &&
      window.MediaRecorder
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∑–µ—Ä–∫–∞–ª–∞ ElevenLabs
   */
  static getMirrorUrl(): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –∑–µ—Ä–∫–∞–ª–∞ ElevenLabs
    return `https://elevenlabs.io/app/agents/${this.AGENT_CONFIG.agentId}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç iframe –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∑–µ—Ä–∫–∞–ª–∞
   */
  static createMirrorIframe(): HTMLIFrameElement {
    const iframe = document.createElement('iframe');
    iframe.src = this.getMirrorUrl();
    iframe.style.width = '100%';
    iframe.style.height = '100%';
    iframe.style.border = 'none';
    iframe.style.borderRadius = '8px';
    iframe.allow = 'camera; microphone; autoplay';
    
    return iframe;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ ElevenLabs API
   */
  static handleError(error: any): string {
    if (error.message) {
      return error.message;
    }
    
    if (error.status) {
      switch (error.status) {
        case 401:
          return '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á ElevenLabs';
        case 403:
          return '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞';
        case 404:
          return '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
        case 429:
          return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        case 500:
          return '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ElevenLabs';
        default:
          return `–û—à–∏–±–∫–∞ API: ${error.status}`;
      }
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ElevenLabs';
  }
}
