import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { HttpsProxyAgent } from 'https-proxy-agent';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏: –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π –≤ .env –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á—ë–Ω
const PROXY_HOST = process.env.PROXY_HOST;
const PROXY_PORT = process.env.PROXY_PORT;
const PROXY_USERNAME = process.env.PROXY_USERNAME;
const PROXY_PASSWORD = process.env.PROXY_PASSWORD;
// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç –¥–ª—è HTTPS —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
let proxyAgent;
if (PROXY_HOST && PROXY_PORT && PROXY_USERNAME && PROXY_PASSWORD) {
  const proxyUrl = `http://${PROXY_USERNAME}:${PROXY_PASSWORD}@${PROXY_HOST}:${PROXY_PORT}`;
  proxyAgent = new HttpsProxyAgent(proxyUrl);
  console.log('üîß Proxy configuration:', { proxyHost: PROXY_HOST, proxyPort: PROXY_PORT, proxyUsername: PROXY_USERNAME });
} else {
  console.log('üîß Proxy disabled');
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logToFile = (level, message, data = null) => {
  const timestamp = new Date().toISOString();
  
  let logLine = `${timestamp} [${level}] ${message}`;
  
  if (data) {
    logLine += `\n${JSON.stringify(data, null, 2)}`;
  }
  
  logLine += '\n';
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(logLine.trim());
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
  const logFile = path.join(logsDir, `${new Date().toISOString().split('T')[0]}.log`);
  fs.appendFileSync(logFile, logLine);
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const requestLogger = (req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    logToFile('INFO', `${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`, {
      method: req.method,
      path: req.path,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      userAgent: req.get('User-Agent'),
      ip: req.ip
    });
  });
  
  next();
};

const app = express();
const PORT = process.env.PORT || 1041;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
app.use(requestLogger);

// ElevenLabs API —Ä–æ—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/api/elevenlabs', async (req, res) => {
  try {
    const apiKey = process.env.ELEVENLABS_API_KEY;
    
    if (!apiKey || apiKey === 'your_elevenlabs_api_key_here') {
      logToFile('WARN', 'ElevenLabs API key not configured, using demo mode');
      
      // –î–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è ElevenLabs
      if (path.includes('/text-to-speech')) {
        return res.status(200).send('Demo audio response - ElevenLabs API key not configured');
      }
      
      return res.status(500).json({ 
        error: 'ElevenLabs API key not configured' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ /api/elevenlabs –∏ –¥–æ–±–∞–≤–ª—è–µ–º /v1
    const path = req.path.replace('/api/elevenlabs', '/v1');
    const url = `https://api.elevenlabs.io${path}`;

    logToFile('INFO', `Proxying ElevenLabs ${req.method} request to: ${url}`, {
      url,
      method: req.method,
      path: req.path,
      body: req.body
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ElevenLabs
    const headers = {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      ...req.headers
    };

    // –£–¥–∞–ª—è–µ–º host –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    delete headers.host;

    const response = await fetch(url, {
      method: req.method,
      headers,
      body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined,
      agent: proxyAgent,
    });

    const data = await response.text();
    
    logToFile('INFO', `ElevenLabs response received: ${response.status}`, {
      status: response.status,
      responseSize: `${data.length} bytes`,
      url
    });

    res.status(response.status).send(data);
  } catch (error) {
    logToFile('ERROR', 'ElevenLabs Proxy error', {
      error: error.message,
      stack: error.stack,
      url: `https://api.elevenlabs.io${req.path.replace('/api/elevenlabs', '/v1')}`
    });
    res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
});

// OpenAI API —Ä–æ—É—Ç - –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è OpenAI
app.use('/api/openai', async (req, res) => {
  try {
    const apiKey = process.env.VITE_OPENAI_API_KEY;
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ OpenAI
    const path = req.path.replace('/api/openai', '');
    
    if (!apiKey || apiKey === 'your_openai_api_key_here') {
      logToFile('WARN', 'OpenAI API key not configured, using demo mode');
      
      // –î–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞
      if (path === '/v1/chat/completions') {
        const demoResponse = {
          choices: [{
            message: {
              content: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à Windex –∫—É–ª–∏–Ω–∞—Ä üë®‚Äçüç≥ –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≥–æ—Ç–æ–≤–∫–µ. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∏–ª–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö!"
            }
          }]
        };
        return res.json(demoResponse);
      }
      
      // –î–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
      if (path === '/v1/chat/completions' && req.body.messages && req.body.messages.some(msg => msg.content.includes('–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'))) {
        const demoRecipe = {
          choices: [{
            message: {
              content: JSON.stringify({
                title: "–î–µ–º–æ-—Ä–µ—Ü–µ–ø—Ç",
                description: "–í–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –≤–∞—à–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                cookTime: "30 –º–∏–Ω",
                servings: 4,
                difficulty: "Easy",
                ingredients: ["–í–∞—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "–°–æ–ª—å", "–ü–µ—Ä–µ—Ü", "–ú–∞—Å–ª–æ"],
                instructions: [
                  "1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
                  "2. –û–±–∂–∞—Ä—å—Ç–µ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ",
                  "3. –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∏",
                  "4. –ü–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ä—è—á–∏–º"
                ],
                tips: "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á"
              })
            }
          }]
        };
        return res.json(demoRecipe);
      }
      
      return res.status(500).json({ 
        error: 'OpenAI API key not configured' 
      });
    }

    const url = `https://api.openai.com${path}`;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    const headers = {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      ...req.headers
    };

    // –£–¥–∞–ª—è–µ–º host –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    delete headers.host;
  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
  logToFile('INFO', `Proxying OpenAI ${req.method} request to: ${url}`, {
    url,
    method: req.method,
    path: req.path,
    body: req.body,
    headers: headers
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç DEBUG: OpenAI Request Details:', {
    url,
    method: req.method,
    headers: headers,
    body: req.body,
    proxyEnv: {
      HTTP_PROXY: process.env.HTTP_PROXY,
      HTTPS_PROXY: process.env.HTTPS_PROXY
    }
  });

    try {
      console.log('üöÄ Sending request to OpenAI:', url);
      const axiosConfig = { method: req.method, url, headers };
      if (req.method !== 'GET') axiosConfig.data = JSON.stringify(req.body);
      // –ü—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (proxyAgent) { axiosConfig.httpsAgent = proxyAgent; axiosConfig.httpAgent = proxyAgent; }
      const response = await axios(axiosConfig);

      const data = JSON.stringify(response.data);
      
      console.log('‚úÖ OpenAI response received:', {
        status: response.status,
        responseSize: `${data.length} bytes`,
        url,
        dataPreview: data.substring(0, 200) + '...'
      });
      
      logToFile('INFO', `OpenAI response received: ${response.status}`, {
        status: response.status,
        responseSize: `${data.length} bytes`,
        url
      });

      res.status(response.status).send(data);
    } catch (axiosError) {
      console.log('‚ùå Axios error occurred:', {
        message: axiosError.message,
        code: axiosError.code,
        status: axiosError.response?.status,
        responseData: axiosError.response?.data,
        url: axiosError.config?.url
      });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ axios (–≤–∫–ª—é—á–∞—è 4xx/5xx —Å—Ç–∞—Ç—É—Å—ã)
      if (axiosError.response) {
        const data = JSON.stringify(axiosError.response.data);
        console.log('üìù Error response data:', data);
        
        logToFile('INFO', `OpenAI response received: ${axiosError.response.status}`, {
          status: axiosError.response.status,
          responseSize: `${data.length} bytes`,
          url
        });
        res.status(axiosError.response.status).send(data);
      } else {
        console.log('üö® Network error:', axiosError.message);
        throw axiosError;
      }
    }
  } catch (error) {
    logToFile('ERROR', 'OpenAI Proxy error', {
      error: error.message,
      stack: error.stack,
      url: `https://api.openai.com${req.path.replace('/api/openai', '')}`
    });
    res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'Pastel Chef AI API Server'
  });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ dist
app.use(express.static('dist'));

// Fallback –¥–ª—è SPA - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç index.html
app.use((req, res) => {
  res.sendFile('dist/index.html', { root: '.' });
});

app.listen(PORT, () => {
  logToFile('INFO', `Pastel Chef AI API server started`, {
    port: PORT,
    elevenlabsConfigured: !!process.env.ELEVENLABS_API_KEY,
    openaiConfigured: !!process.env.VITE_OPENAI_API_KEY,
    proxyConfigured: !!proxyAgent,
    proxyHost: PROXY_HOST,
    proxyPort: PROXY_PORT,
    proxyUsername: PROXY_USERNAME,
    logsDirectory: logsDir,
    serverUrl: `http://localhost:${PORT}`
  });
  
  console.log(`üöÄ Pastel Chef AI API server running on port ${PORT}`);
  console.log(`üîë ElevenLabs API key configured: ${process.env.ELEVENLABS_API_KEY ? 'Yes' : 'No'}`);
  console.log(`üîë OpenAI API key configured: ${process.env.VITE_OPENAI_API_KEY ? 'Yes' : 'No'}`);
  console.log(`üåê Proxy configured: ${PROXY_HOST ? `${PROXY_HOST}:${PROXY_PORT}` : 'Disabled'}`);
  console.log(`üìÅ Logs directory: ${logsDir}`);
  console.log(`üåê Server URL: http://localhost:${PORT}`);
});
