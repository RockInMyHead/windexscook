export class OpenAITTS {
  private static currentAudio: HTMLAudioElement | null = null;

  static async speak(text: string, voice: string = 'alloy'): Promise<void> {
    try {
      console.log(`üîä [OpenAI TTS] –ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:`, {
        textLength: text.length,
        voice,
        textPreview: text.substring(0, 100) + (text.length > 100 ? '...' : '')
      });

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      this.stop();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI TTS API
      const response = await fetch('/api/openai/tts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          voice,
          model: 'tts-1'
        }),
      });

      if (!response.ok) {
        throw new Error(`TTS API error: ${response.status}`);
      }

      console.log('‚úÖ [OpenAI TTS] –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', response.headers.get('content-length') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');

      // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);

      console.log('üéµ [OpenAI TTS] –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', audioBlob.size, '–±–∞–π—Ç');

      // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
      const audio = new Audio(audioUrl);
      this.currentAudio = audio;

      return new Promise((resolve, reject) => {
        audio.onended = () => {
          console.log('üèÅ [OpenAI TTS] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          resolve();
        };

        audio.onerror = (error) => {
          console.error('‚ùå [OpenAI TTS] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          reject(error);
        };

        console.log('‚ñ∂Ô∏è [OpenAI TTS] –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...');
        audio.play().catch(reject);
      });

    } catch (error) {
      console.error('‚ùå [OpenAI TTS] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  static stop(): void {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
    }
  }

  static isSupported(): boolean {
    return true; // OpenAI TTS –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API
  }
}
