// ElevenLabs Text-to-Speech Service
export class ElevenLabsTTS {
  private static readonly BASE_URL = '/api/elevenlabs';
  // API –∫–ª—é—á —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
   */
  static async getVoices(): Promise<any[]> {
    try {
      console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
      const response = await fetch(`${this.BASE_URL}/voices`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.voices || [];
    } catch (error) {
      console.error('Error fetching voices:', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
   */
  static async synthesizeSpeech(text: string, voiceId: string = 'JBFqnCBsd6RMkjVDRZzb'): Promise<Buffer> {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ElevenLabs —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
      console.log('üéØ URL:', `${this.BASE_URL}/text-to-speech/${voiceId}`);
      console.log('üìù –¢–µ–∫—Å—Ç:', text);
      
      const response = await fetch(`${this.BASE_URL}/text-to-speech/${voiceId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: text,
          model_id: 'eleven_multilingual_v2',
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.75
          }
        })
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const arrayBuffer = await response.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ buffer, —Ä–∞–∑–º–µ—Ä:', buffer.length, 'bytes');
      return buffer;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
   */
  static async getVoiceSettings(voiceId: string): Promise<any> {
    try {
      const response = await fetch(`${this.BASE_URL}/voices/${voiceId}/settings`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching voice settings:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å
   */
  static async textToSpeech(text: string, voiceId: string = 'pNInz6obpgDQGcFmaJgB'): Promise<Blob> {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ElevenLabs —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
      console.log('üéØ URL:', `${this.BASE_URL}/text-to-speech/${voiceId}`);
      console.log('üìù –¢–µ–∫—Å—Ç:', text);
      
      const response = await fetch(`${this.BASE_URL}/text-to-speech/${voiceId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: text,
          model_id: 'eleven_monolingual_v1',
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.5
          }
        })
      });

      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const blob = await response.blob();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ blob, —Ä–∞–∑–º–µ—Ä:', blob.size, 'bytes');
      return blob;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å:', error);
      throw error;
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –∏–∑ blob
   */
  static async playAudio(audioBlob: Blob): Promise<void> {
    try {
      console.log('üîä –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ...');
      console.log('üìä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ:', audioBlob.size, 'bytes');
      console.log('üìä –¢–∏–ø –∞—É–¥–∏–æ:', audioBlob.type);
      
      const audioUrl = URL.createObjectURL(audioBlob);
      console.log('üîó –°–æ–∑–¥–∞–Ω URL –¥–ª—è –∞—É–¥–∏–æ:', audioUrl);
      
      const audio = new Audio(audioUrl);
      console.log('üéµ –°–æ–∑–¥–∞–Ω Audio —ç–ª–µ–º–µ–Ω—Ç');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      audio.onloadstart = () => console.log('üì• –ê—É–¥–∏–æ –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è');
      audio.onloadeddata = () => console.log('üì• –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      audio.oncanplay = () => console.log('‚ñ∂Ô∏è –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
      audio.onplay = () => console.log('‚ñ∂Ô∏è –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
      audio.onended = () => {
        console.log('üèÅ –ê—É–¥–∏–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å');
        URL.revokeObjectURL(audioUrl);
      };
      audio.onerror = (e) => console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', e);
      
      await audio.play();
      console.log('‚úÖ –ê—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å –∏ —Å—Ä–∞–∑—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç
   */
  static async speak(text: string, voiceId?: string): Promise<void> {
    try {
      console.log('üé§ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', text);
      
      const audioBlob = await this.textToSpeech(text, voiceId);
      console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ, —Ä–∞–∑–º–µ—Ä:', audioBlob.size, 'bytes');
      await this.playAudio(audioBlob);
      console.log('‚úÖ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ speak:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ –ø–æ ID
   */
  static async getVoiceInfo(voiceId: string): Promise<any> {
    try {
      const response = await fetch(`${this.BASE_URL}/voices/${voiceId}`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching voice info:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á, –ø–æ–ª—É—á–∞—è —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
   */
  static async testApiKey(): Promise<boolean> {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
      const voices = await this.getVoices();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤:', voices.length);
      return true;
    } catch (error) {
      console.error('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error);
      return false;
    }
  }
}
