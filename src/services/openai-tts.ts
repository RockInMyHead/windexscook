export class OpenAITTS {
  private static currentAudio: HTMLAudioElement | null = null;
  private static requestId = 0;

  static async speak(text: string, voice: string = 'alloy'): Promise<void> {
    const requestId = ++this.requestId;
    const startTime = Date.now();
    
    try {
      console.log(`üîä [OpenAI TTS #${requestId}] ===== –ù–ê–ß–ê–õ–û –°–ò–ù–¢–ï–ó–ê –†–ï–ß–ò =====`);
      console.log(`üìù [OpenAI TTS #${requestId}] –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞:`, {
        textLength: text.length,
        voice,
        model: 'tts-1-hd',
        textPreview: text.substring(0, 100) + (text.length > 100 ? '...' : ''),
        fullText: text
      });

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      if (this.currentAudio) {
        console.log(`‚èπÔ∏è [OpenAI TTS #${requestId}] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`);
        this.stop();
      }

      console.log(`üåê [OpenAI TTS #${requestId}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: /api/openai/tts`);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI TTS API
      const response = await fetch('/api/openai/tts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          voice,
          model: 'tts-1-hd'
        }),
      });

      const requestTime = Date.now() - startTime;
      console.log(`üì° [OpenAI TTS #${requestId}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${requestTime}ms:`, {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });

      if (!response.ok) {
        throw new Error(`TTS API error: ${response.status}`);
      }

      console.log('‚úÖ [OpenAI TTS #' + requestId + '] –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

      // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);

      console.log('üéµ [OpenAI TTS #' + requestId + '] –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', {
        blobSize: audioBlob.size,
        blobType: audioBlob.type,
        audioUrl: audioUrl.substring(0, 50) + '...',
        blobSizeKB: Math.round(audioBlob.size / 1024) + ' KB'
      });

      // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
      const audio = new Audio(audioUrl);
      this.currentAudio = audio;

      console.log('üéß [OpenAI TTS #' + requestId + '] –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');

      return new Promise((resolve, reject) => {
        audio.onloadstart = () => {
          console.log('üì• [OpenAI TTS #' + requestId + '] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        };

        audio.oncanplay = () => {
          console.log('üéµ [OpenAI TTS #' + requestId + '] –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
        };

        audio.onplay = () => {
          console.log('‚ñ∂Ô∏è [OpenAI TTS #' + requestId + '] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å');
        };

        audio.onpause = () => {
          console.log('‚è∏Ô∏è [OpenAI TTS #' + requestId + '] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        };

        audio.onended = () => {
          const totalTime = Date.now() - startTime;
          console.log('üèÅ [OpenAI TTS #' + requestId + '] ===== –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û =====');
          console.log(`‚è±Ô∏è [OpenAI TTS #${requestId}] –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
          console.log(`üìä [OpenAI TTS #${requestId}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, {
            requestTime: requestTime + 'ms',
            totalTime: totalTime + 'ms',
            audioDuration: audio.duration ? Math.round(audio.duration * 1000) + 'ms' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            textLength: text.length,
            voice: voice
          });
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          resolve();
        };

        audio.onerror = (error) => {
          console.error('‚ùå [OpenAI TTS #' + requestId + '] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
          console.error('üîç [OpenAI TTS #' + requestId + '] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            error: error,
            audioSrc: audio.src,
            audioReadyState: audio.readyState,
            audioNetworkState: audio.networkState
          });
          URL.revokeObjectURL(audioUrl);
          this.currentAudio = null;
          reject(error);
        };

        console.log('üöÄ [OpenAI TTS #' + requestId + '] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...');
        audio.play().catch((playError) => {
          console.error('‚ùå [OpenAI TTS #' + requestId + '] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', playError);
          reject(playError);
        });
      });

    } catch (error) {
      const totalTime = Date.now() - startTime;
      console.error('‚ùå [OpenAI TTS #' + requestId + '] ===== –û–®–ò–ë–ö–ê –°–ò–ù–¢–ï–ó–ê –†–ï–ß–ò =====');
      console.error(`‚è±Ô∏è [OpenAI TTS #${requestId}] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${totalTime}ms`);
      console.error('üîç [OpenAI TTS #' + requestId + '] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
      throw error;
    }
  }

  static stop(): void {
    if (this.currentAudio) {
      console.log('‚èπÔ∏è [OpenAI TTS] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
      console.log('‚úÖ [OpenAI TTS] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚ÑπÔ∏è [OpenAI TTS] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    }
  }

  static isSupported(): boolean {
    console.log('üîç [OpenAI TTS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API');
    return true; // OpenAI TTS –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API
  }
}
