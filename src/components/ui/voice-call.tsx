import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './card';
import { Button } from './button';
import { Badge } from './badge';
import { 
  Phone, 
  PhoneOff, 
  Mic, 
  MicOff, 
  Loader2,
  ChefHat
} from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { OpenAIService } from '@/services/openai';
import { OpenAITTS } from '@/services/openai-tts';

interface VoiceCallProps {
  className?: string;
}

interface CallState {
  isConnected: boolean;
  isRecording: boolean;
  isPlaying: boolean;
  isLoading: boolean;
  error: string | null;
}

export const VoiceCall: React.FC<VoiceCallProps> = ({ className = '' }) => {
  const [callState, setCallState] = useState<CallState>({
    isConnected: false,
    isRecording: false,
    isPlaying: false,
    isLoading: false,
    error: null
  });

  const recognitionRef = useRef<any>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'ru-RU';

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        handleUserMessage(transcript);
      };

      recognitionRef.current.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        setCallState(prev => ({ ...prev, isRecording: false, error: event.error }));
      };

      recognitionRef.current.onend = () => {
        setCallState(prev => ({ ...prev, isRecording: false }));
      };
    }
  }, []);

  const handleUserMessage = async (text: string) => {
    if (!text.trim()) return;

    console.log('üé§ [TTS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª:', text);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —á–∞—Ç
    try {
      setCallState(prev => ({ ...prev, isLoading: true }));
      
      console.log('ü§ñ [TTS] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...');
      const response = await OpenAIService.generateRecipe([text], undefined, undefined, true);
      
      const responseText = response.content || response.title || '–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!';
      console.log('ü§ñ [TTS] AI –æ—Ç–≤–µ—Ç–∏–ª:', responseText);
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ TTS
      console.log('üîä [TTS] –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI TTS...');
      await speakText(responseText);
      
    } catch (error) {
      console.error('‚ùå [TTS] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        variant: "destructive",
      });
    } finally {
      setCallState(prev => ({ ...prev, isLoading: false }));
    }
  };

  const speakText = async (text: string) => {
    try {
      console.log('üîä [TTS] –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', text.substring(0, 50) + '...');
      setCallState(prev => ({ ...prev, isPlaying: true }));
      
      const startTime = Date.now();
      await OpenAITTS.speak(text, 'alloy');
      const duration = Date.now() - startTime;
      
      console.log(`‚úÖ [TTS] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms`);
    } catch (error) {
      console.error('‚ùå [TTS] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI TTS",
        variant: "destructive",
      });
    } finally {
      setCallState(prev => ({ ...prev, isPlaying: false }));
    }
  };

  const startCall = async () => {
    try {
      console.log('üìû [TTS] –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫...');
      setCallState(prev => ({ ...prev, isLoading: true }));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
      console.log('üé§ [TTS] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      stream.getTracks().forEach(track => track.stop()); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–∞–∑—É
      console.log('‚úÖ [TTS] –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
      
      setCallState(prev => ({ 
        ...prev, 
        isConnected: true, 
        isLoading: false,
        error: null 
      }));
      
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ —Ä–µ—á–∏
      const welcomeText = "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –ø–æ–≤–∞—Ä. –ì–æ–≤–æ—Ä–∏—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏!";
      console.log('üëã [TTS] –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:', welcomeText);
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      await speakText(welcomeText);
      
      console.log('üéâ [TTS] –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç');
      toast({
        title: "üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç",
        description: "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI –ø–æ–≤–∞—Ä–æ–º",
      });
      
    } catch (error) {
      console.error('‚ùå [TTS] –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞:', error);
      setCallState(prev => ({ 
        ...prev, 
        isLoading: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É' 
      }));
      toast({
        title: "–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞",
        description: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
        variant: "destructive",
      });
    }
  };

  const endCall = () => {
    console.log('üìû [TTS] –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS
    OpenAITTS.stop();
    
    setCallState({
      isConnected: false,
      isRecording: false,
      isPlaying: false,
      isLoading: false,
      error: null
    });
    
    console.log('‚úÖ [TTS] –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    toast({
      title: "üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
      description: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–≤–∞—Ä–æ–º!",
    });
  };

  const startRecording = () => {
    if (!callState.isConnected) return;
    
    try {
      console.log('üé§ [TTS] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—á–∏...');
      recognitionRef.current.start();
      setCallState(prev => ({ ...prev, isRecording: true }));
      
      toast({
        title: "üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞",
        description: "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω...",
      });
    } catch (error) {
      console.error('‚ùå [TTS] –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
        variant: "destructive",
      });
    }
  };

  const stopRecording = () => {
    console.log('üõë [TTS] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—á–∏...');
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    setCallState(prev => ({ ...prev, isRecording: false }));
  };

  return (
    <div className={`h-full flex flex-col ${className}`}>
      {/* Header */}
      <div className="p-4 bg-gradient-to-r from-primary/10 to-secondary/10 border-b border-border/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-primary rounded-full flex items-center justify-center">
              <ChefHat className="w-5 h-5 text-primary-foreground" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-foreground">AI –ü–æ–≤–∞—Ä</h2>
              <p className="text-sm text-muted-foreground">
                {callState.isConnected ? '–í —Å–µ—Ç–∏' : '–ù–µ –≤ —Å–µ—Ç–∏'}
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            {callState.isConnected && (
              <Badge variant={callState.isRecording ? "destructive" : "secondary"}>
                {callState.isRecording ? "–ó–∞–ø–∏—Å—å" : "–ì–æ—Ç–æ–≤"}
              </Badge>
            )}
            {callState.isPlaying && (
              <Badge variant="default">
                <Mic className="w-3 h-3 mr-1" />
                –ì–æ–≤–æ—Ä–∏—Ç
              </Badge>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col items-center justify-center p-6 space-y-6">
        {/* Avatar */}
        <div className="relative">
          <div className="w-32 h-32 bg-gradient-primary rounded-full flex items-center justify-center transition-all duration-300">
            <ChefHat className="w-16 h-16 text-primary-foreground" />
          </div>
          
          {/* Status indicator */}
          <div className={`absolute -bottom-2 -right-2 w-8 h-8 rounded-full border-4 border-background ${
            callState.isConnected ? 'bg-green-500' : 'bg-gray-400'
          }`} />
        </div>

        {/* Status Text */}
        <div className="text-center space-y-2">
          <h3 className="text-xl font-semibold text-foreground">
            {callState.isConnected ? 'AI –ü–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!' : '–ù–∞—á–Ω–∏—Ç–µ –∑–≤–æ–Ω–æ–∫'}
          </h3>
          <p className="text-muted-foreground max-w-md">
            {callState.isConnected 
              ? '–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏'
              : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–≤–æ–Ω–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–≤–∞—Ä–æ–º'
            }
          </p>
        </div>

        {/* Messages - —É–±—Ä–∞–Ω–æ */}

        {/* Controls */}
        <div className="flex items-center gap-4">
          {!callState.isConnected ? (
            <Button
              onClick={startCall}
              disabled={callState.isLoading}
              size="lg"
              className="bg-green-600 hover:bg-green-700 text-white px-8 py-3"
            >
              {callState.isLoading ? (
                <>
                  <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Phone className="w-5 h-5 mr-2" />
                  –ü–æ–∑–≤–æ–Ω–∏—Ç—å
                </>
              )}
            </Button>
          ) : (
            <>
              <Button
                onClick={callState.isRecording ? stopRecording : startRecording}
                disabled={callState.isLoading}
                variant={callState.isRecording ? "destructive" : "outline"}
                size="lg"
                className="px-6 py-3"
              >
                {callState.isRecording ? (
                  <>
                    <MicOff className="w-5 h-5 mr-2" />
                    –°—Ç–æ–ø
                  </>
                ) : (
                  <>
                    <Mic className="w-5 h-5 mr-2" />
                    –ì–æ–≤–æ—Ä–∏—Ç—å
                  </>
                )}
              </Button>
              
              <Button
                onClick={endCall}
                variant="destructive"
                size="lg"
                className="px-6 py-3"
              >
                <PhoneOff className="w-5 h-5 mr-2" />
                –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </>
          )}
        </div>

        {/* Error Display */}
        {callState.error && (
          <Card className="w-full max-w-md border-destructive">
            <CardContent className="p-4">
              <p className="text-destructive text-sm text-center">
                {callState.error}
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};
