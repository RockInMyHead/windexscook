import React from 'react';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Copy, Volume2, ThumbsUp, Bot, Clock } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { ElevenLabsTTS } from '@/services/elevenlabs-tts';

interface CalorieAnalysisResultProps {
  result: string;
  timestamp: Date;
  onLike?: () => void;
}

export const CalorieAnalysisResult: React.FC<CalorieAnalysisResultProps> = ({ 
  result, 
  timestamp, 
  onLike 
}) => {
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatMessageContent = (content: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º ### –Ω–∞ ** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–µ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    let formattedContent = content.replace(/\n### (.*?)(?=\n|$)/g, '\n**$1**');
    
    // –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º #### –Ω–∞ ** –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    formattedContent = formattedContent.replace(/\n#### (.*?)(?=\n|$)/g, '\n**$1**');
    
    // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const parts = formattedContent.split(/(\*\*.*?\*\*)/g);
    
    return parts.map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        const text = part.slice(2, -2);
        return (
          <span key={index} className="font-bold text-base">
            {text}
          </span>
        );
      }
      return part;
    });
  };

  const handleCopyMessage = async (content: string) => {
    try {
      await navigator.clipboard.writeText(content);
      toast({
        title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
      });
    } catch (error) {
      console.error('Error copying message:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        variant: "destructive",
      });
    }
  };

  const handleSpeakMessage = async (content: string) => {
    try {
      await ElevenLabsTTS.speak(content);
      toast({
        title: "üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
        description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–∑–≤—É—á–µ–Ω",
      });
    } catch (error) {
      console.error('Error speaking message:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="flex gap-3 justify-start">
      <Avatar className="w-8 h-8 shrink-0">
        <AvatarFallback className="bg-gradient-to-r from-green-500 to-emerald-500 text-white">
          <Bot className="w-4 h-4" />
        </AvatarFallback>
      </Avatar>
      
      <div className="max-w-[80%] space-y-2">
        <div className="px-4 py-3 rounded-2xl bg-muted">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-6 h-6 bg-green-500/20 rounded-full flex items-center justify-center">
              <Clock className="w-3 h-3 text-green-500" />
            </div>
            <p className="text-sm font-medium text-green-600 dark:text-green-400">
              üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
            </p>
          </div>
          <div className="text-sm whitespace-pre-wrap">
            {formatMessageContent(result)}
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <span className="text-xs text-muted-foreground">
            {formatTime(timestamp)}
          </span>
          <div className="flex gap-1">
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0"
              onClick={() => handleCopyMessage(result)}
              title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            >
              <Copy className="w-3 h-3" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0"
              onClick={() => handleSpeakMessage(result)}
              title="–û–∑–≤—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            >
              <Volume2 className="w-3 h-3" />
            </Button>
            {onLike && (
              <Button
                variant="ghost"
                size="sm"
                className="h-6 w-6 p-0"
                onClick={onLike}
                title="–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∞–Ω–∞–ª–∏–∑"
              >
                <ThumbsUp className="w-3 h-3" />
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
