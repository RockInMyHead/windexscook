import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { HttpsProxyAgent } from 'https-proxy-agent';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –±–µ–∑ fallback
const PROXY_HOST = process.env.PROXY_HOST;
const PROXY_PORT = process.env.PROXY_PORT;
const PROXY_USERNAME = process.env.PROXY_USERNAME;
const PROXY_PASSWORD = process.env.PROXY_PASSWORD;

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç –¥–ª—è HTTPS —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —É–∫–∞–∑–∞–Ω—ã
const proxyUrl = PROXY_HOST && PROXY_PORT && PROXY_USERNAME && PROXY_PASSWORD 
  ? `http://${PROXY_USERNAME}:${PROXY_PASSWORD}@${PROXY_HOST}:${PROXY_PORT}`
  : null;

const proxyAgent = proxyUrl ? new HttpsProxyAgent(proxyUrl) : null;

console.log('üîß Proxy configuration:', {
  proxyUrl: proxyUrl ? proxyUrl.replace(/:[^@]*@/, ':***@') : 'disabled', // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
  proxyHost: PROXY_HOST,
  proxyPort: PROXY_PORT,
  proxyUsername: PROXY_USERNAME,
  proxyEnabled: !!proxyAgent
});

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const imageLimitsFile = path.join(logsDir, 'image_limits.json');
const DAILY_IMAGE_LIMIT = 20;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const loadImageLimits = () => {
  try {
    if (fs.existsSync(imageLimitsFile)) {
      const data = fs.readFileSync(imageLimitsFile, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading image limits:', error);
  }
  return {};
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const saveImageLimits = (limits) => {
  try {
    fs.writeFileSync(imageLimitsFile, JSON.stringify(limits, null, 2));
  } catch (error) {
    console.error('Error saving image limits:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const checkImageLimit = (userIdentifier) => {
  const limits = loadImageLimits();
  const today = new Date().toDateString();
  
  if (!limits[userIdentifier]) {
    limits[userIdentifier] = {};
  }
  
  if (!limits[userIdentifier][today]) {
    limits[userIdentifier][today] = 0;
  }
  
  return {
    canGenerate: limits[userIdentifier][today] < DAILY_IMAGE_LIMIT,
    currentCount: limits[userIdentifier][today],
    limit: DAILY_IMAGE_LIMIT
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const incrementImageCount = (userIdentifier) => {
  const limits = loadImageLimits();
  const today = new Date().toDateString();
  
  if (!limits[userIdentifier]) {
    limits[userIdentifier] = {};
  }
  
  if (!limits[userIdentifier][today]) {
    limits[userIdentifier][today] = 0;
  }
  
  limits[userIdentifier][today]++;
  saveImageLimits(limits);
  
  return limits[userIdentifier][today];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logToFile = (level, message, data = null) => {
  const timestamp = new Date().toISOString();
  
  let logLine = `${timestamp} [${level}] ${message}`;
  
  if (data) {
    logLine += `\n${JSON.stringify(data, null, 2)}`;
  }
  
  logLine += '\n';
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(logLine.trim());
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
  const logFile = path.join(logsDir, `${new Date().toISOString().split('T')[0]}.log`);
  fs.appendFileSync(logFile, logLine);
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const requestLogger = (req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    logToFile('INFO', `${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`, {
      method: req.method,
      path: req.path,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      userAgent: req.get('User-Agent'),
      ip: req.ip
    });
  });
  
  next();
};

const app = express();
const PORT = process.env.PORT || 1041;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
app.use(requestLogger);

// Disable caching for all responses
app.disable('etag');
app.use((req, res, next) => {
  res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  next();
});

// Static serve files from dist with no-cache for HTML
app.use(express.static('dist', {
  setHeaders: (res, path) => {
    if (path.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    }
  }
}));

// ElevenLabs API —Ä–æ—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/api/elevenlabs', async (req, res) => {
  try {
    const apiKey = process.env.ELEVENLABS_API_KEY;
    
    if (!apiKey) {
      logToFile('ERROR', 'ElevenLabs API key not configured');
      return res.status(500).json({ 
        error: 'ElevenLabs API key not configured' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ /api/elevenlabs –∏ –¥–æ–±–∞–≤–ª—è–µ–º /v1
    const path = req.path.replace('/api/elevenlabs', '/v1');
    const url = `https://api.elevenlabs.io${path}`;

    logToFile('INFO', `Proxying ElevenLabs ${req.method} request to: ${url}`, {
      url,
      method: req.method,
      path: req.path,
      body: req.body
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ElevenLabs
    const headers = {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      ...req.headers
    };

    // –£–¥–∞–ª—è–µ–º host –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    delete headers.host;

    const axiosConfig = {
      method: req.method,
      url: url,
      headers,
      data: req.method !== 'GET' ? JSON.stringify(req.body) : undefined,
      proxy: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (proxyAgent) {
      axiosConfig.httpsAgent = proxyAgent;
      axiosConfig.httpAgent = proxyAgent;
    }
    
    const response = await axios(axiosConfig);

    const data = JSON.stringify(response.data);
    
    logToFile('INFO', `ElevenLabs response received: ${response.status}`, {
      status: response.status,
      responseSize: `${data.length} bytes`,
      url
    });

    res.status(response.status).send(data);
  } catch (error) {
    logToFile('ERROR', 'ElevenLabs Proxy error', {
      error: error.message,
      stack: error.stack,
      url: `https://api.elevenlabs.io${req.path.replace('/api/elevenlabs', '/v1')}`
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ axios (–≤–∫–ª—é—á–∞—è 4xx/5xx —Å—Ç–∞—Ç—É—Å—ã)
    if (error.response) {
      const data = JSON.stringify(error.response.data);
      res.status(error.response.status).send(data);
    } else {
      res.status(500).json({ 
        error: 'Internal server error',
        details: error.message 
      });
    }
  }
});

// OpenAI TTS endpoint - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –ø—Ä–æ–∫—Å–∏
app.post('/api/openai/tts', async (req, res) => {
  try {
    const { text, voice = 'alloy', model = 'tts-1' } = req.body;

    if (!text) {
      return res.status(400).json({ error: 'Text is required' });
    }

    const apiKey = process.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      return res.status(500).json({ error: 'OpenAI API key not configured' });
    }

    const headers = {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    };

    const requestData = {
      model,
      input: text,
      voice,
      response_format: 'mp3'
    };

    const axiosConfig = {
      method: 'POST',
      url: 'https://api.openai.com/v1/audio/speech',
      headers,
      data: JSON.stringify(requestData),
      responseType: 'arraybuffer',
      proxy: false
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (proxyAgent) {
      axiosConfig.httpsAgent = proxyAgent;
      axiosConfig.httpAgent = proxyAgent;
    }

    const response = await axios(axiosConfig);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
    res.setHeader('Content-Type', 'audio/mpeg');
    res.setHeader('Content-Length', response.data.length);
    res.setHeader('Cache-Control', 'no-cache');
    
    res.send(response.data);

    logToFile('INFO', 'TTS audio generated successfully', {
      textLength: text.length,
      voice,
      model
    });

  } catch (error) {
    logToFile('ERROR', 'TTS generation error', {
      error: error.message,
      stack: error.stack,
      text: req.body.text
    });
    
    if (error.response) {
      res.status(error.response.status).json({ 
        error: 'TTS generation failed',
        details: error.response.data 
      });
    } else {
      res.status(500).json({ 
        error: 'Internal server error',
        details: error.message 
      });
    }
  }
});

// OpenAI API —Ä–æ—É—Ç - –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è OpenAI
app.use('/api/openai', async (req, res) => {
  try {
    const apiKey = process.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      logToFile('ERROR', 'OpenAI API key not configured');
      return res.status(500).json({ 
        error: 'OpenAI API key not configured' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ /api/openai
    const path = req.path.replace('/api/openai', '');
    const url = `https://api.openai.com${path}`;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    const headers = {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      ...req.headers
    };

    // –£–¥–∞–ª—è–µ–º host –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    delete headers.host;
  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
  logToFile('INFO', `Proxying OpenAI ${req.method} request to: ${url}`, {
    url,
    method: req.method,
    path: req.path,
    body: req.body,
    headers: headers
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç DEBUG: OpenAI Request Details:', {
    url,
    method: req.method,
    headers: headers,
    body: req.body,
    proxyEnv: {
      HTTP_PROXY: process.env.HTTP_PROXY,
      HTTPS_PROXY: process.env.HTTPS_PROXY
    }
  });

    try {
      console.log(`üöÄ Sending axios request ${proxyAgent ? 'with proxy agent' : 'WITHOUT proxy'}...`);
      
      const axiosConfig = {
        method: req.method,
        url: url,
        headers,
        data: req.method !== 'GET' ? JSON.stringify(req.body) : undefined,
        proxy: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (proxyAgent) {
        axiosConfig.httpsAgent = proxyAgent;
        axiosConfig.httpAgent = proxyAgent;
      }
      
      const response = await axios(axiosConfig);

      const data = JSON.stringify(response.data);
      
      console.log('‚úÖ OpenAI response received:', {
        status: response.status,
        responseSize: `${data.length} bytes`,
        url,
        dataPreview: data.substring(0, 200) + '...'
      });
      
      logToFile('INFO', `OpenAI response received: ${response.status}`, {
        status: response.status,
        responseSize: `${data.length} bytes`,
        url
      });

      res.status(response.status).send(data);
    } catch (axiosError) {
      console.log('‚ùå Axios error occurred:', {
        message: axiosError.message,
        code: axiosError.code,
        status: axiosError.response?.status,
        responseData: axiosError.response?.data,
        url: axiosError.config?.url
      });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ axios (–≤–∫–ª—é—á–∞—è 4xx/5xx —Å—Ç–∞—Ç—É—Å—ã)
      if (axiosError.response) {
        const data = JSON.stringify(axiosError.response.data);
        console.log('üìù Error response data:', data);
        
        logToFile('INFO', `OpenAI response received: ${axiosError.response.status}`, {
          status: axiosError.response.status,
          responseSize: `${data.length} bytes`,
          url
        });
        res.status(axiosError.response.status).send(data);
      } else {
        console.log('üö® Network error:', axiosError.message);
        throw axiosError;
      }
    }
  } catch (error) {
    logToFile('ERROR', 'OpenAI Proxy error', {
      error: error.message,
      stack: error.stack,
      url: `https://api.openai.com${req.path.replace('/api/openai', '')}`
    });
    res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
});

// Image generation endpoint
app.post('/api/generate-nb-image', async (req, res) => {
  try {
    const { prompt, userIdentifier } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ 
        error: 'Prompt is required' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userKey = userIdentifier || req.ip || 'anonymous';
    const limitCheck = checkImageLimit(userKey);
    
    if (!limitCheck.canGenerate) {
      logToFile('INFO', `Image generation limit exceeded for user: ${userKey}`, {
        currentCount: limitCheck.currentCount,
        limit: limitCheck.limit
      });
      
      return res.status(429).json({ 
        error: 'Daily image generation limit exceeded',
        currentCount: limitCheck.currentCount,
        limit: limitCheck.limit,
        message: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${limitCheck.limit}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.`
      });
    }

    const apiKey = process.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      logToFile('ERROR', 'OpenAI API key not configured for image generation');
      return res.status(500).json({ 
        error: 'OpenAI API key not configured' 
      });
    }

    logToFile('INFO', `Generating image for prompt: ${prompt}`, {
      userKey,
      currentCount: limitCheck.currentCount,
      limit: limitCheck.limit
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    const headers = {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    };

    const imageRequest = {
      model: "dall-e-3",
      prompt: prompt,
      n: 1,
      size: "1024x1024",
      quality: "standard",
      response_format: "b64_json"
    };

    const axiosConfig = {
      method: 'POST',
      url: 'https://api.openai.com/v1/images/generations',
      headers,
      data: JSON.stringify(imageRequest),
      proxy: false
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (proxyAgent) {
      axiosConfig.httpsAgent = proxyAgent;
      axiosConfig.httpAgent = proxyAgent;
    }
    
    const response = await axios(axiosConfig);

    if (response.data && response.data.data && response.data.data[0] && response.data.data[0].b64_json) {
      const imageBase64 = response.data.data[0].b64_json;
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newCount = incrementImageCount(userKey);
      
      logToFile('INFO', `Image generated successfully for prompt: ${prompt}`, {
        userKey,
        newCount,
        limit: limitCheck.limit
      });
      
      res.json({ 
        image_base64: imageBase64,
        currentCount: newCount,
        limit: limitCheck.limit
      });
    } else {
      logToFile('ERROR', 'Invalid response format from OpenAI image generation');
      res.status(500).json({ 
        error: 'Invalid response from image generation service' 
      });
    }

  } catch (error) {
    logToFile('ERROR', 'Image generation error', {
      error: error.message,
      stack: error.stack,
      prompt: req.body.prompt
    });
    
    if (error.response) {
      const data = JSON.stringify(error.response.data);
      res.status(error.response.status).send(data);
    } else {
      res.status(500).json({ 
        error: 'Internal server error',
        details: error.message 
      });
    }
  }
});

// Check image generation limits endpoint
app.get('/api/image-limits/:userIdentifier', (req, res) => {
  try {
    const { userIdentifier } = req.params;
    const userKey = userIdentifier || req.ip || 'anonymous';
    const limitCheck = checkImageLimit(userKey);
    
    res.json({
      canGenerate: limitCheck.canGenerate,
      currentCount: limitCheck.currentCount,
      limit: limitCheck.limit,
      remaining: limitCheck.limit - limitCheck.currentCount
    });
  } catch (error) {
    logToFile('ERROR', 'Error checking image limits', {
      error: error.message,
      userIdentifier: req.params.userIdentifier
    });
    res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
});

// YooKassa –ø–ª–∞—Ç–µ–∂–∏
app.post('/api/payments/create', async (req, res) => {
  try {
    const { userId, userEmail, returnUrl } = req.body;

    if (!userId || !userEmail || !returnUrl) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YooKassa
    const yookassaConfig = {
      shopId: process.env.YOOKASSA_SHOP_ID,
      secretKey: process.env.YOOKASSA_SECRET_KEY ? '***configured***' : 'NOT SET',
      isConfigured: !!(process.env.YOOKASSA_SHOP_ID && process.env.YOOKASSA_SECRET_KEY)
    };

    console.log('üîß [Payment] YooKassa configuration check:', yookassaConfig);

    if (!yookassaConfig.isConfigured) {
      logToFile('ERROR', 'YooKassa not configured', yookassaConfig);
      return res.status(500).json({
        error: 'Payment service not configured',
        details: 'YooKassa credentials missing'
      });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º YooKassaService
    const { YooKassaService } = await import('./src/services/yookassa.js');

    const payment = await YooKassaService.createPremiumPayment(
      userId,
      userEmail,
      returnUrl
    );

    logToFile('INFO', 'Premium payment created', {
      paymentId: payment.id,
      userId,
      userEmail,
      amount: payment.amount.value,
      currency: payment.amount.currency
    });

    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º return_url, –¥–æ–±–∞–≤–ª—è—è paymentId –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    const paymentUrl = payment.confirmation.confirmation_url;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const separator = returnUrl.includes('?') ? '&' : '?';
    const modifiedReturnUrl = `${returnUrl}${separator}paymentId=${payment.id}`;

    // –î–ª—è YooKassa –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π return_url
    // –ù–æ –æ–±—ã—á–Ω–æ YooKassa –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å return_url –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    // –ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à modifiedReturnUrl –≤ –æ—Ç–≤–µ—Ç–µ

    res.json({
      success: true,
      paymentId: payment.id,
      paymentUrl: paymentUrl,
      returnUrl: modifiedReturnUrl, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ localStorage
      amount: payment.amount.value,
      currency: payment.amount.currency
    });

  } catch (error) {
    logToFile('ERROR', 'Payment creation error', {
      error: error.message,
      stack: error.stack,
      body: req.body
    });
    
    res.status(500).json({ 
      error: 'Payment creation failed',
      details: error.message 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
app.get('/api/payments/status/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;

    if (!paymentId) {
      return res.status(400).json({ error: 'Payment ID is required' });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º YooKassaService
    const { YooKassaService } = await import('./src/services/yookassa.js');

    const payment = await YooKassaService.getPaymentStatus(paymentId);

    logToFile('INFO', 'Payment status checked', {
      paymentId: payment.id,
      status: payment.status,
      paid: payment.paid
    });

    res.json({
      success: true,
      paymentId: payment.id,
      status: payment.status,
      paid: payment.paid,
      amount: payment.amount.value,
      currency: payment.amount.currency,
      metadata: payment.metadata
    });

  } catch (error) {
    logToFile('ERROR', 'Payment status check error', {
      error: error.message,
      stack: error.stack,
      paymentId: req.params.paymentId
    });
    
    res.status(500).json({ 
      error: 'Payment status check failed',
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å YooKassa)
app.get('/api/payments/user/:userId/recent', async (req, res) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    console.log('üîç [Payment] Looking for recent payment for user:', userId);

    // –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    const fs = await import('fs').then(m => m.promises);
    const path = await import('path').then(m => m.default);
    const logsDir = path.join(process.cwd(), 'logs');

    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –≤ –ª–æ–≥–∞—Ö
    try {
      const todayLog = path.join(logsDir, new Date().toISOString().split('T')[0] + '.log');
      
      if (fs.stat(todayLog).catch(() => null)) {
        const logContent = await fs.readFile(todayLog, 'utf8');
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const paymentMatches = logContent.matchAll(/"userId":"([^"]*)".*?"paymentId":"([^"]*)"/g);
        
        let lastPayment = null;
        for (const match of paymentMatches) {
          if (match[1] === userId) {
            lastPayment = { id: match[2], userId: match[1] };
          }
        }

        if (lastPayment) {
          console.log('‚úÖ [Payment] Found recent payment:', lastPayment);
          return res.json({
            success: true,
            id: lastPayment.id,
            userId: lastPayment.userId
          });
        }
      }
    } catch (logError) {
      console.warn('‚ö†Ô∏è [Payment] Could not search logs:', logError);
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ª–æ–≥–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    res.status(404).json({ 
      error: 'No recent payment found for user',
      userId 
    });

  } catch (error) {
    console.error('‚ùå [Payment] Error getting recent payment:', error);
    res.status(500).json({ 
      error: 'Failed to get recent payment',
      details: error.message 
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'Pastel Chef AI API Server'
  });
});

// ===== SMTP SERVER MANAGEMENT ENDPOINTS =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SMTP —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/smtp/stats', async (req, res) => {
  try {
    const { CustomEmailService } = await import('./src/services/custom-email.js');
    const stats = CustomEmailService.getSMTPStats();
    
    res.json({
      success: true,
      stats: stats
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SMTP —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
app.get('/api/smtp/emails', async (req, res) => {
  try {
    const { CustomEmailService } = await import('./src/services/custom-email.js');
    const emails = CustomEmailService.getReceivedEmails();
    
    res.json({
      success: true,
      emails: emails,
      count: emails.length
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–∞',
      details: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞
app.get('/api/smtp/emails/last', async (req, res) => {
  try {
    const { CustomEmailService } = await import('./src/services/custom-email.js');
    const lastEmail = CustomEmailService.getLastReceivedEmail();
    
    if (!lastEmail) {
      return res.json({
        success: true,
        email: null,
        message: '–ü–∏—Å–µ–º –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'
      });
    }
    
    res.json({
      success: true,
      email: lastEmail
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ',
      details: error.message
    });
  }
});

// –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–∏—Å–µ–º
app.delete('/api/smtp/emails', async (req, res) => {
  try {
    const { CustomEmailService } = await import('./src/services/custom-email.js');
    CustomEmailService.clearReceivedEmails();
    
    res.json({
      success: true,
      message: '–û—á–µ—Ä–µ–¥—å –ø–∏—Å–µ–º –æ—á–∏—â–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∏—Å–µ–º:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∏—Å—å–º–∞',
      details: error.message
    });
  }
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞
app.post('/api/smtp/stop', async (req, res) => {
  try {
    const { CustomEmailService } = await import('./src/services/custom-email.js');
    await CustomEmailService.stopSMTPServer();
    
    res.json({
      success: true,
      message: 'SMTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SMTP —Å–µ—Ä–≤–µ—Ä',
      details: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/smtp/auth-config', async (req, res) => {
  try {
    const { CustomSMTPServer } = await import('./src/services/custom-smtp-server.js');
    
    res.json({
      success: true,
      config: {
        authEnabled: CustomSMTPServer.authEnabled,
        username: CustomSMTPServer.username,
        passwordMasked: CustomSMTPServer.password ? '***' + CustomSMTPServer.password.slice(-3) : null,
        port: CustomSMTPServer.port,
        isRunning: CustomSMTPServer.isRunning
      }
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      details: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.post('/api/smtp/auth-config', async (req, res) => {
  try {
    const { username, password, authEnabled } = req.body;
    
    if (!username || !password) {
      return res.status(400).json({
        error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    process.env.SMTP_SERVER_USERNAME = username;
    process.env.SMTP_SERVER_PASSWORD = password;
    process.env.SMTP_SERVER_REQUIRE_AUTH = authEnabled ? 'true' : 'false';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ SMTP —Å–µ—Ä–≤–µ—Ä–µ
    const { CustomSMTPServer } = await import('./src/services/custom-smtp-server.js');
    CustomSMTPServer.updateAuthConfig(username, password, authEnabled);
    
    console.log(`üîß [SMTP] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
    console.log(`   - –ü–∞—Ä–æ–ª—å: ***${password.slice(-3)}`);
    console.log(`   - –í–∫–ª—é—á–µ–Ω–∞: ${authEnabled}`);
    
    res.json({
      success: true,
      message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      config: {
        username,
        passwordMasked: '***' + password.slice(-3),
        authEnabled
      }
    });
  } catch (error) {
    console.error('‚ùå [SMTP] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      details: error.message
    });
  }
});

// ===== EMAIL ENDPOINTS =====

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
app.post('/api/auth/reset-password', async (req, res) => {
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    console.log('üîê [Auth] –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è:', email);

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    const jwt = await import('jsonwebtoken');
    const { CustomEmailService } = await import('./src/services/custom-email.js');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ email —Å–µ—Ä–≤–∏—Å
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π SMTP —Å–µ—Ä–≤–µ—Ä
    const isDevelopment = process.env.NODE_ENV !== 'production';
    
    if (!CustomEmailService.isConfigured() && !isDevelopment) {
      console.log('‚ö†Ô∏è [Auth] Email —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é');
      return res.json({
        success: true,
        message: '–ü–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞)
    const resetToken = jwt.default.sign(
      { email, type: 'password_reset' },
      process.env.JWT_SECRET || 'default-secret',
      { expiresIn: '24h' }
    );

    console.log('üîë [Auth] –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    await CustomEmailService.sendPasswordReset(email, resetToken);

    logToFile('INFO', 'Password reset email sent', {
      email: email,
      tokenGenerated: true
    });

    res.json({
      success: true,
      message: '–ü–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå [Auth] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
    logToFile('ERROR', 'Password reset error', {
      error: error.message,
      stack: error.stack,
      body: req.body
    });
    
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ',
      details: error.message 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
app.post('/api/auth/verify-reset-token', async (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    console.log('üîç [Auth] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

    const jwt = await import('jsonwebtoken');
    
    const decoded = jwt.default.verify(token, process.env.JWT_SECRET || 'default-secret');
    
    if (decoded.type !== 'password_reset') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞');
    }

    console.log('‚úÖ [Auth] –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è:', decoded.email);

    res.json({
      success: true,
      email: decoded.email
    });

  } catch (error) {
    console.error('‚ùå [Auth] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(400).json({ 
      error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' 
    });
  }
});

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
app.post('/api/auth/reset-password-confirm', async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    
    if (!token || !newPassword) {
      return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('üîê [Auth] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');

    const jwt = await import('jsonwebtoken');
    
    const decoded = jwt.default.verify(token, process.env.JWT_SECRET || 'default-secret');
    
    if (decoded.type !== 'password_reset') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞');
    }

    // –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // await updateUserPassword(decoded.email, newPassword);
    
    console.log('‚úÖ [Auth] –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è:', decoded.email);

    logToFile('INFO', 'Password reset confirmed', {
      email: decoded.email,
      passwordChanged: true
    });

    res.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå [Auth] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
    res.status(400).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
      details: error.message 
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
app.post('/api/auth/send-welcome', async (req, res) => {
  try {
    const { email, userName } = req.body;
    
    if (!email || !userName) {
      return res.status(400).json({ error: 'Email –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('üìß [Auth] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è:', email);

    const { CustomEmailService } = await import('./src/services/custom-email.js');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ email —Å–µ—Ä–≤–∏—Å
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π SMTP —Å–µ—Ä–≤–µ—Ä
    const isDevelopment = process.env.NODE_ENV !== 'production';
    
    if (!CustomEmailService.isConfigured() && !isDevelopment) {
      console.log('‚ö†Ô∏è [Auth] Email —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞');
      return res.json({
        success: true,
        message: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)'
      });
    }

    await CustomEmailService.sendWelcomeEmail(email, userName);

    logToFile('INFO', 'Welcome email sent', {
      email: email,
      userName: userName
    });

    res.json({
      success: true,
      message: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå [Auth] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ',
      details: error.message 
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
app.post('/api/auth/send-premium-confirmation', async (req, res) => {
  try {
    const { email, userName } = req.body;
    
    if (!email || !userName) {
      return res.status(400).json({ error: 'Email –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('‚≠ê [Auth] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è:', email);

    const { CustomEmailService } = await import('./src/services/custom-email.js');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ email —Å–µ—Ä–≤–∏—Å
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π SMTP —Å–µ—Ä–≤–µ—Ä
    const isDevelopment = process.env.NODE_ENV !== 'production';
    
    if (!CustomEmailService.isConfigured() && !isDevelopment) {
      console.log('‚ö†Ô∏è [Auth] Email —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      return res.json({
        success: true,
        message: '–ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)'
      });
    }

    await CustomEmailService.sendPremiumConfirmation(email, userName);

    logToFile('INFO', 'Premium confirmation email sent', {
      email: email,
      userName: userName
    });

    res.json({
      success: true,
      message: '–ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå [Auth] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      details: error.message 
    });
  }
});

// Fallback –¥–ª—è SPA - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç index.html
app.use((req, res) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML —Ñ–∞–π–ª–æ–≤
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  res.sendFile('dist/index.html', { root: '.' });
});

app.listen(PORT, () => {
  logToFile('INFO', `Pastel Chef AI API server started`, {
    port: PORT,
    elevenlabsConfigured: !!process.env.ELEVENLABS_API_KEY,
    openaiConfigured: !!process.env.VITE_OPENAI_API_KEY,
    proxyConfigured: true,
    proxyHost: PROXY_HOST,
    proxyPort: PROXY_PORT,
    proxyUsername: PROXY_USERNAME,
    logsDirectory: logsDir,
    serverUrl: `http://localhost:${PORT}`
  });
  
  console.log(`üöÄ Pastel Chef AI API server running on port ${PORT}`);
  console.log(`üîë ElevenLabs API key configured: ${process.env.ELEVENLABS_API_KEY ? 'Yes' : 'No'}`);
  console.log(`üîë OpenAI API key configured: ${process.env.VITE_OPENAI_API_KEY ? 'Yes' : 'No'}`);
  console.log(`üåê Proxy configured: ${PROXY_HOST}:${PROXY_PORT} (${PROXY_USERNAME})`);
  console.log(`üìÅ Logs directory: ${logsDir}`);
  console.log(`üåê Server URL: http://localhost:${PORT}`);
});
