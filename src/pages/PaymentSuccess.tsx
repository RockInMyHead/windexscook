import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, Loader2, XCircle } from 'lucide-react';
import { useUser } from '@/contexts/UserContext';
import { toast } from '@/hooks/use-toast';

const PaymentSuccess: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { activateSubscription } = useUser();
  const [paymentStatus, setPaymentStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [paymentData, setPaymentData] = useState<any>(null);

  useEffect(() => {
    const checkPaymentStatus = async () => {
      try {
        console.log('üîç PaymentSuccess: Component loaded, checking payment status...');
        console.log('üîç PaymentSuccess: Current URL:', window.location.href);
        console.log('üîç PaymentSuccess: URL hash:', window.location.hash);
        console.log('üîç PaymentSuccess: Cookies:', document.cookie);
        console.log('üîç PaymentSuccess: localStorage available:', typeof localStorage !== 'undefined');

        // –ü–æ–ª—É—á–∞–µ–º paymentId –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let paymentId = searchParams.get('paymentId') ||
                       searchParams.get('orderId') ||
                       searchParams.get('payment_id') ||
                       searchParams.get('id'); // –∏–Ω–æ–≥–¥–∞ YooKassa –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ id

        console.log('üîç PaymentSuccess: URL params:', Object.fromEntries(searchParams.entries()));
        console.log('üîç PaymentSuccess: Initial paymentId from URL params:', paymentId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL hash
        if (!paymentId && window.location.hash) {
          const hashParams = new URLSearchParams(window.location.hash.substring(1));
          paymentId = hashParams.get('paymentId');
          console.log('üîç PaymentSuccess: Checked URL hash, found:', paymentId);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
        if (!paymentId) {
          try {
            const cookies = document.cookie.split(';');
            const paymentIdCookie = cookies.find(cookie => cookie.trim().startsWith('pendingPaymentId='));
            if (paymentIdCookie) {
              paymentId = paymentIdCookie.split('=')[1];
              console.log('üîç PaymentSuccess: Found in cookies:', paymentId);
            }
          } catch (cookieError) {
            console.error('üîç PaymentSuccess: Cookie error:', cookieError);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        if (!paymentId) {
          try {
            paymentId = localStorage.getItem('pendingPaymentId');
            console.log('üîç PaymentSuccess: Checked localStorage, found:', paymentId);
          } catch (storageError) {
            console.error('üîç PaymentSuccess: localStorage error:', storageError);
            paymentId = null;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
        if (!paymentId) {
          try {
            paymentId = sessionStorage.getItem('pendingPaymentId');
            console.log('üîç PaymentSuccess: Checked sessionStorage, found:', paymentId);
          } catch (storageError) {
            console.error('üîç PaymentSuccess: sessionStorage error:', storageError);
            paymentId = null;
          }
        }

        console.log('üîç PaymentSuccess: Final paymentId to use:', paymentId);

        if (!paymentId) {
          console.error('‚ùå PaymentSuccess: No payment ID found in URL parameters or storage');

          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
          const userId = searchParams.get('userId');
          console.log('üîç PaymentSuccess: userId from URL:', userId);
          console.log('üîç PaymentSuccess: All searchParams:', Object.fromEntries(searchParams.entries()));

          if (userId) {
            console.log('üîç PaymentSuccess: Trying to find recent payment for userId:', userId);
            try {
              console.log('üîç PaymentSuccess: Calling API:', `/api/payments/user/${userId}/recent`);
              const recentPaymentsResponse = await fetch(`/api/payments/user/${userId}/recent`);
              console.log('üîç PaymentSuccess: API response status:', recentPaymentsResponse.status);

              if (recentPaymentsResponse.ok) {
                const recentPayment = await recentPaymentsResponse.json();
                console.log('üîç PaymentSuccess: API response data:', recentPayment);
                if (recentPayment && recentPayment.id) {
                  paymentId = recentPayment.id;
                  console.log('‚úÖ PaymentSuccess: Found recent payment:', paymentId);
                } else {
                  console.warn('‚ö†Ô∏è PaymentSuccess: Recent payment not found in response');
                }
              } else {
                const errorText = await recentPaymentsResponse.text();
                console.error('‚ùå PaymentSuccess: API error response:', errorText);
              }
            } catch (recentError) {
              console.error('‚ùå PaymentSuccess: Failed to find recent payment:', recentError);
            }
          } else {
            console.warn('‚ö†Ô∏è PaymentSuccess: No userId found in URL, cannot search for recent payments');
          }

          if (!paymentId) {
            console.error('‚ùå PaymentSuccess: Still no paymentId found, showing error');
            setPaymentStatus('error');
            return;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        console.log('üîç PaymentSuccess: Checking payment status for:', paymentId);
        const response = await fetch(`/api/payments/status/${paymentId}`);

        if (!response.ok) {
          const errorText = await response.text();
          console.error('‚ùå PaymentSuccess: API response not ok:', response.status, errorText);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${response.status}`);
        }

        const data = await response.json();
        console.log('üîç PaymentSuccess: Payment data received:', data);
        setPaymentData(data);

        if (data.success && data.paid && data.status === 'succeeded') {
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          console.log('‚úÖ PaymentSuccess: Payment successful, activating subscription');
          activateSubscription();
          setPaymentStatus('success');

          // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π paymentId –∏–∑ localStorage
          localStorage.removeItem('pendingPaymentId');

          toast({
            title: "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!",
            description: "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏",
          });
        } else {
          console.error('‚ùå PaymentSuccess: Payment not successful:', {
            success: data.success,
            paid: data.paid,
            status: data.status
          });
          setPaymentStatus('error');
        }

      } catch (error) {
        console.error('‚ùå PaymentSuccess: Error checking payment status:', error);
        setPaymentStatus('error');
      }
    };

    checkPaymentStatus();
  }, [searchParams, activateSubscription]);

  const handleGoHome = () => {
    navigate('/');
  };

  const handleGoToProfile = () => {
    navigate('/profile');
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          {paymentStatus === 'loading' && (
            <>
              <Loader2 className="w-16 h-16 mx-auto mb-4 animate-spin text-primary" />
              <CardTitle>–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...</CardTitle>
              <CardDescription>
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
              </CardDescription>
            </>
          )}

          {paymentStatus === 'success' && (
            <>
              <CheckCircle className="w-16 h-16 mx-auto mb-4 text-green-500" />
              <CardTitle className="text-green-700">–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!</CardTitle>
              <CardDescription>
                –í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
              </CardDescription>
            </>
          )}

          {paymentStatus === 'error' && (
            <>
              <XCircle className="w-16 h-16 mx-auto mb-4 text-red-500" />
              <CardTitle className="text-red-700">–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</CardTitle>
              <CardDescription>
                –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
              </CardDescription>
            </>
          )}
        </CardHeader>

        <CardContent className="space-y-4">
          {paymentData && paymentStatus === 'success' && (
            <div className="bg-green-50 dark:bg-green-950 p-4 rounded-lg">
              <h3 className="font-medium text-green-800 dark:text-green-200 mb-2">
                –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:
              </h3>
              <div className="text-sm text-green-700 dark:text-green-300 space-y-1">
                <p>–°—É–º–º–∞: {paymentData.amount} {paymentData.currency}</p>
                <p>–°—Ç–∞—Ç—É—Å: {paymentData.status}</p>
                <p>ID –ø–ª–∞—Ç–µ–∂–∞: {paymentData.paymentId}</p>
              </div>
            </div>
          )}

          <div className="flex gap-2">
            <Button 
              onClick={handleGoHome}
              className="flex-1"
              variant={paymentStatus === 'success' ? 'default' : 'outline'}
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </Button>
            
            {paymentStatus === 'success' && (
              <Button 
                onClick={handleGoToProfile}
                className="flex-1"
                variant="outline"
              >
                –ü—Ä–æ—Ñ–∏–ª—å
              </Button>
            )}
          </div>

          {paymentStatus === 'success' && (
            <div className="text-center">
              <p className="text-sm text-muted-foreground">
                –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ AI-—Ñ—É–Ω–∫—Ü–∏–∏!
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default PaymentSuccess;
