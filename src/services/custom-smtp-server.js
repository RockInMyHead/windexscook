import { SMTPServer } from 'smtp-server';
import { createWriteStream } from 'fs';
import { join } from 'path';

export class CustomSMTPServer {
  static server = null;
  static isRunning = false;
  static port = 2525; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö SMTP —Å–µ—Ä–≤–µ—Ä–æ–≤
  static emails = []; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
  static authEnabled = false; // –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  static username = ''; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static password = ''; // –ü–∞—Ä–æ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π SMTP —Å–µ—Ä–≤–µ—Ä
   */
  static async start() {
    if (this.isRunning) {
      console.log('üìß [CustomSMTP] –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('üöÄ [CustomSMTP] –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π SMTP —Å–µ—Ä–≤–µ—Ä...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.loadAuthConfig();

    this.server = new SMTPServer({
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      authOptional: !this.authEnabled,
      authMethods: this.authEnabled ? ['PLAIN', 'LOGIN'] : [],
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      onAuth: this.authEnabled ? this.handleAuth.bind(this) : undefined,
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ STARTTLS
      secure: false,
      allowInsecureAuth: true,
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º
      onData(stream, session, callback) {
        console.log('üì® [CustomSMTP] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç:', session.envelope.mailFrom);
        console.log('üì® [CustomSMTP] –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', session.envelope.rcptTo);
        
        let emailData = '';
        
        stream.on('data', (chunk) => {
          emailData += chunk.toString();
        });
        
        stream.on('end', () => {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ
          const email = {
            id: Date.now(),
            from: session.envelope.mailFrom,
            to: session.envelope.rcptTo,
            data: emailData,
            receivedAt: new Date().toISOString(),
            session: {
              remoteAddress: session.remoteAddress,
              hostname: session.hostnameAppearsAs,
              heloHostname: session.heloHostname
            }
          };
          
          CustomSMTPServer.emails.push(email);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          const emailFile = join(process.cwd(), 'logs', `email_${email.id}.eml`);
          const writeStream = createWriteStream(emailFile);
          writeStream.write(emailData);
          writeStream.end();
          
          console.log('‚úÖ [CustomSMTP] –ü–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', emailFile);
          console.log('üìä [CustomSMTP] –í—Å–µ–≥–æ –ø–∏—Å–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏:', CustomSMTPServer.emails.length);
          
          callback();
        });
      },
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      onError(err) {
        console.error('‚ùå [CustomSMTP] –û—à–∏–±–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞:', err);
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    this.server.listen(this.port, () => {
      this.isRunning = true;
      console.log(`‚úÖ [CustomSMTP] SMTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
      console.log(`üìß [CustomSMTP] –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: smtp://localhost:${this.port}`);
      
      if (this.authEnabled) {
        console.log(`üîê [CustomSMTP] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞`);
        console.log(`üë§ [CustomSMTP] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.username}`);
        console.log(`üîë [CustomSMTP] –ú–µ—Ç–æ–¥—ã: PLAIN, LOGIN`);
      } else {
        console.log(`üîì [CustomSMTP] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞
    this.server.on('error', (err) => {
      console.error('‚ùå [CustomSMTP] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
      this.isRunning = false;
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SMTP —Å–µ—Ä–≤–µ—Ä
   */
  static async stop() {
    if (!this.isRunning || !this.server) {
      console.log('üìß [CustomSMTP] –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('üõë [CustomSMTP] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SMTP —Å–µ—Ä–≤–µ—Ä...');
    
    return new Promise((resolve) => {
      this.server.close(() => {
        this.isRunning = false;
        this.server = null;
        console.log('‚úÖ [CustomSMTP] SMTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve();
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
   */
  static getEmails() {
    return this.emails;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ
   */
  static getLastEmail() {
    return this.emails.length > 0 ? this.emails[this.emails.length - 1] : null;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–∏—Å–µ–º
   */
  static clearEmails() {
    this.emails = [];
    console.log('üóëÔ∏è [CustomSMTP] –û—á–µ—Ä–µ–¥—å –ø–∏—Å–µ–º –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
   */
  static getStats() {
    return {
      isRunning: this.isRunning,
      port: this.port,
      emailsCount: this.emails.length,
      lastEmailAt: this.emails.length > 0 ? this.emails[this.emails.length - 1].receivedAt : null
    };
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  static loadAuthConfig() {
    this.authEnabled = process.env.SMTP_SERVER_REQUIRE_AUTH === 'true';
    this.username = process.env.SMTP_SERVER_USERNAME || 'admin';
    this.password = process.env.SMTP_SERVER_PASSWORD || 'password';
    
    console.log(`üîß [CustomSMTP] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:`);
    console.log(`   - –í–∫–ª—é—á–µ–Ω–∞: ${this.authEnabled}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.username}`);
    console.log(`   - –ü–∞—Ä–æ–ª—å: ${this.password ? '***' + this.password.slice(-3) : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  static updateAuthConfig(username, password, authEnabled) {
    this.username = username;
    this.password = password;
    this.authEnabled = authEnabled;
    
    console.log(`üîß [CustomSMTP] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`);
    console.log(`   - –í–∫–ª—é—á–µ–Ω–∞: ${this.authEnabled}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.username}`);
    console.log(`   - –ü–∞—Ä–æ–ª—å: ${this.password ? '***' + this.password.slice(-3) : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP
   */
  static handleAuth(auth, session, callback) {
    console.log(`üîê [CustomSMTP] –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:`);
    console.log(`   - –ú–µ—Ç–æ–¥: ${auth.method}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${auth.username}`);
    console.log(`   - IP: ${session.remoteAddress}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (auth.username === this.username && auth.password === this.password) {
      console.log(`‚úÖ [CustomSMTP] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${auth.username}`);
      callback(null, { user: auth.username });
    } else {
      console.log(`‚ùå [CustomSMTP] –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${auth.username}`);
      callback(new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
   */
  static isServerRunning() {
    return this.isRunning;
  }
}
