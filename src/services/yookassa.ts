import { YooCheckout } from '@a2seven/yoo-checkout';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa
const YOOKASSA_CONFIG = {
  shopId: process.env.YOOKASSA_SHOP_ID || '1183996',
  secretKey: process.env.YOOKASSA_SECRET_KEY || 'live_OTmJmdMHX6ysyUcUpBz5kt-dmSq1pT-Y5gLgmpT1jXg',
  planId: process.env.YOOKASSA_PLAN_ID || '1183996'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
const checkout = new YooCheckout({
  shopId: YOOKASSA_CONFIG.shopId,
  secretKey: YOOKASSA_CONFIG.secretKey,
});

export interface PaymentData {
  amount: number;
  currency: string;
  description: string;
  returnUrl: string;
  userId: string;
  userEmail: string;
}

export interface PaymentResponse {
  id: string;
  status: string;
  paid: boolean;
  amount: {
    value: string;
    currency: string;
  };
  confirmation: {
    type: string;
    confirmation_url: string;
  };
  created_at: string;
  description: string;
  metadata: {
    userId: string;
    userEmail: string;
  };
}

export class YooKassaService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å–∫–∏
   */
  static async createPayment(paymentData: PaymentData): Promise<PaymentResponse> {
    try {
      const payment = await checkout.createPayment({
        amount: {
          value: paymentData.amount.toFixed(2),
          currency: paymentData.currency,
        },
        confirmation: {
          type: 'redirect',
          return_url: paymentData.returnUrl,
        },
        description: paymentData.description,
        metadata: {
          userId: paymentData.userId,
          userEmail: paymentData.userEmail,
        },
        receipt: {
          customer: {
            email: paymentData.userEmail,
          },
          items: [
            {
              description: paymentData.description,
              quantity: '1.00',
              amount: {
                value: paymentData.amount.toFixed(2),
                currency: paymentData.currency,
              },
              vat_code: 1, // –ë–µ–∑ –ù–î–°
              payment_subject: 'service', // –£—Å–ª—É–≥–∞
              payment_mode: 'full_payment', // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞
            },
          ],
        },
      });

      return payment as PaymentResponse;
    } catch (error) {
      console.error('YooKassa payment creation error:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
   */
  static async getPaymentStatus(paymentId: string): Promise<PaymentResponse> {
    try {
      console.log('üîç [YooKassa] Checking payment status for:', paymentId);
      const payment = await checkout.getPayment(paymentId);
      console.log('‚úÖ [YooKassa] Payment status received:', {
        id: payment.id,
        status: payment.status,
        paid: payment.paid
      });
      return payment as PaymentResponse;
    } catch (error) {
      console.error('‚ùå [YooKassa] Payment status error:', error);

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å receipt, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å gracefully
      if (error.response?.data?.type === 'error' &&
          error.response?.data?.code === 'invalid_request' &&
          error.response?.data?.parameter === 'receipt') {
        console.warn('‚ö†Ô∏è [YooKassa] Receipt error - possibly old payment created without receipt');

        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å mock-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∑–Ω–∞–µ–º —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞
        // (—ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        return {
          id: paymentId,
          status: 'succeeded',
          paid: true,
          amount: { value: '250.00', currency: 'RUB' },
          confirmation: { type: 'redirect', confirmation_url: '' },
          created_at: new Date().toISOString(),
          description: 'Premium –ø–æ–¥–ø–∏—Å–∫–∞ WindexsCook',
          metadata: { userId: 'unknown', userEmail: 'unknown' }
        } as PaymentResponse;
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å–∫–∏ (1 —Ä—É–±–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async createPremiumPayment(userId: string, userEmail: string, returnUrl: string): Promise<PaymentResponse> {
    return this.createPayment({
      amount: 1,
      currency: 'RUB',
      description: 'Premium –ø–æ–¥–ø–∏—Å–∫–∞ WindexsCook - –¥–æ—Å—Ç—É–ø –∫ AI —Ñ—É–Ω–∫—Ü–∏—è–º',
      returnUrl,
      userId,
      userEmail,
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
   */
  static isPaymentSuccessful(payment: PaymentResponse): boolean {
    return payment.status === 'succeeded' && payment.paid === true;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  static getConfig() {
    return {
      shopId: YOOKASSA_CONFIG.shopId,
      isTestMode: YOOKASSA_CONFIG.secretKey.startsWith('test_'),
    };
  }
}
